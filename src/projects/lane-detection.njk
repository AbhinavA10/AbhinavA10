{% extends "layout_project.njk" %}
{% block content %}
    {% from "_components.njk" import iframeVideo %}
    <div class = "text-center">
        <h2 class="section-heading text-uppercase">Lane Detection</h2>
        <p class="item-intro text-muted">OpenCV pipeline</p>
    </div>
    <div id="carouselLaneDetection" class="carousel slide" data-ride="carousel">
        <!-- Indicators -->
        <ol class="carousel-indicators">
            <li data-target="#carouselLaneDetection" data-slide-to="0" class="active"></li>
            <li data-target="#carouselLaneDetection" data-slide-to="1"></li>
            <li data-target="#carouselLaneDetection" data-slide-to="2"></li>
            <li data-target="#carouselLaneDetection" data-slide-to="3"></li>
        </ol>
        <!-- Wrapper for slides -->
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="../img/portfolio/lane-detection/01_original.PNG" alt="Original Image"
                        class="d-block w-100 portfolioImgWide">
                <div class="carousel-caption">
                    <p>Original Image</p>
                </div>
            </div>
            <div class="carousel-item">
                <img src="../img/portfolio/lane-detection/02_warped-and-sobel.PNG" alt="Sobel Filter"
                        class="d-block w-100 portfolioImgWide">
                <div class="carousel-caption">
                    <p>Transform and Sobel Filter result</p>
                </div>
            </div>
            <div class="carousel-item">
                <img src="../img/portfolio/lane-detection/04_sliding-window.PNG" alt="Curve Fitting"
                        class="d-block w-100 portfolioImgWide">
                <div class="carousel-caption">
                    <p>Sliding Window and curve fitting</p>
                </div>
            </div>
            <div class="carousel-item">
                <img src="../img/portfolio/lane-detection/05_overlayed.PNG" alt="Result"
                        class="d-block w-100 portfolioImgWide">
                <div class="carousel-caption">
                    <p>Final Result</p>
                </div>
            </div>
        </div>
        <!-- Left and right controls -->
        <a class="carousel-control-prev" href="#carouselLaneDetection" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselLaneDetection" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>

    <div class="portfolio-description">
        <p>I recently became interested in working with computer vision. The idea of being able to make a machine 'see' has been around for 
        a long time now, but it still fascinates me nonetheless. So, I took the initiative and set out to become more familiar with it.
            Along the way of doing so, I came across a python library called "OpenCV"
        </p>
        <p>
            One of the most practical applications of OpenCV I saw, was using it for the purposes of robotics and autonomous cars. Thus, my first attempt at using OpenCV 
            was to detect lane lines on a road.
        </p>
        <p>
            This first attempt of mine is shown below. Essentially, for every frame in a video, I:
            <ul>
                <li>first make the image grayscale</li>
                <li>perform a Canny Edge Detection algorithim</li>
                <li>crop image to reigon of intrest</li>
                <li>perform Hough Line Transforms to determine locations of lane lines</li>
            </ul>
        </p>
        {{ iframeVideo("Jff2ffOKMOc") }}
        <p>
        This method was very rough, but gave a good idea of the task at hand.
        </p>

        <p>
        After joining <a href="https://watonomous.ca/#/" target="_blank">WATonomous</a>, a student design team aiming to make a Level 4 self-driving car, I became even more interested in computer vision
        and set out to learn different methods of performing computer vision tasks.
        </p>
        <p>
            The pipeline for the new method is as follows:
            <ul>
                <li>perform a perspective transform to gain a bird's eye view</li>
                <li>use a Sobel Filter to get reigons of interest</li>
                <li>crop image to nearby lanes</li>
                <li>create a histogram out of the image, for determing general location of lane</li>
                <li>use a sliding window algorithm and fit a polynomial curve onto each lane line</li>
                <li>perform an inverse perspective transform</li>
            </ul>
            Each step of this pipeline is shown in the carousel at the top of this page
        </p>
        <p>
            Below is a demo of the final result of this new lane detection pipeline
        </p>
        {{ iframeVideo("PWx9QnoDK0s") }}
        <p>
        The next steps for this would be to possibly train a segnet, or some other kind of neural net to perform the lane detection.
        </p>
    </div>
    <div class="text-center">
        <ul class="list-inline">
            <li>
                <a href="https://github.com/AbhinavA10/OpenCV-Projects" target="_blank">Github Repo</a>
            </li>
            <li>Timeframe: 2A</li>
            <li>Relevant Technologies: Python, OpenCV</li>
        </ul>
        <a  href="../projects.html">
            <button class="btn btn-primary" type="button">
                <i class="fa fa-times"></i>
                  Close Project
            </button>
        </a>
    </div>
{% endblock %}